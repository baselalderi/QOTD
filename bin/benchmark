#!/usr/bin/env ruby

require "benchmark"
require "ostruct"
require "optparse"
require "bundler/setup"
require "qotd"
require "qotd/client"

options = OpenStruct.new

OptionParser.new do |opts|
  opts.banner = "Usage: bin/benchmark [options]"

  opts.on("-c", "--clients CLIENTS", "Number of clients") do |clients|
    options.clients = clients.to_i
  end

  opts.on("-r", "--requests REQUESTS", "Number of requests") do |requests|
    options.requests = requests.to_i
  end

  opts.on("-p", "--processes PROCESSES", "Number of processes") do |processes|
    options.processes = processes.to_i
  end

  opts.on("-v", "--verbose", "Use verbose output") do |_verbose|
    options.verbose = true
  end

  opts.on("-h", "--help", "Prints this help") do
    puts opts

    exit
  end
end.parse!

NUM_CLIENTS   = options.clients   || 10
NUM_REQUESTS  = options.requests  || 1
NUM_PROCESSES = options.processes || 2
VERBOSE       = options.verbose   || false

def bm(strategy)
  begin
    config          = yield(Qotd::CONFIG.dup)
    queue           = Queue.new

    server = fork do
      Qotd.start(config: config)
    end

    result =  Benchmark.realtime do
      (1..NUM_CLIENTS).map do |n|
        Thread.new do
          Qotd::Client.make_requests(
            config: config,
            request: "GET quote linus\r\n",
            num_requests: NUM_REQUESTS
          ) { |response| queue.push(response) if VERBOSE }
        end
      end.each(&:join)
    end
  ensure
    Process.kill(:INT, server)
  end

  puts "#{strategy}: #{result}"

  if VERBOSE
    results = Hash.new(0)

    while !queue.empty? do
      v = queue.pop
      results.store(v, results[v]+1)
    end

    results.each do |k, v|
      puts "   #{k.split.first[0..30]}: #{v}"
    end
  end
end

puts "Running benchmark with #{NUM_CLIENTS} clients, " \
  "#{NUM_REQUESTS} requests per client, " \
  "and #{NUM_PROCESSES} processes\n"

bm(Qotd::Strategy::Serial) do |config|
  config.tap do |config|
    config.strategy = Qotd::Strategy::Serial
    config.verbose  = false
  end
end

bm(Qotd::Strategy::Prefork) do |config|
  config.tap do |config|
    config.strategy     = Qotd::Strategy::Prefork
    config.verbose      = false
    config.num_processes = NUM_PROCESSES
  end
end

exit
